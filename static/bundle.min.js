(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

function html5Audio(cb) {
    if (!navigator.getUserMedia)
        navigator.getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
    if (!navigator.cancelAnimationFrame)
        navigator.cancelAnimationFrame = navigator.webkitCancelAnimationFrame || navigator.mozCancelAnimationFrame;
    if (!navigator.requestAnimationFrame)
        navigator.requestAnimationFrame = navigator.webkitRequestAnimationFrame || navigator.mozRequestAnimationFrame;

    function success(stream) {
        cb(null, stream)
    }

    function error(e) {
        cb(e, null)
    }

    navigator.getUserMedia({audio:true}, success, error);
}



module.exports = html5Audio

},{}],2:[function(require,module,exports){
'use strict';
var html5Audio = require('./html5audio.js');
var Recorder = require('./recorder.js');
var recorder;

window.AudioContext = window.AudioContext ||
                          window.webkitAudioContext;

window.context = new AudioContext();
var inputPoint, microphone;
var recordBtn;
var stopBtn;
var playBtn;

window.addEventListener('load', function(e) {
    console.log('Asking for audio');
    // Ask the user for the microphone
    html5Audio(initAudio);

    recordBtn = document.getElementById('btn-record');
    stopBtn = document.getElementById('btn-stop');
    playBtn = document.getElementById('btn-play');

    recordBtn.addEventListener('click', function(e) {
        recorder.record();
        console.log('recording');
    });

    stopBtn.addEventListener('click', function(e) {
        recorder.stop();
        console.log('stop');
    });

    playBtn.addEventListener('click', function(e) {
        console.log('play');
        recorder.getBuffer(getBufferCallback);
    });

});

function initAudio(err, stream) {
    if (err) { alert('Permission for Audio denied'); }
    console.log('Audio stream', stream);

    inputPoint = context.createGain();
    microphone = context.createMediaStreamSource(stream);
    microphone.connect(inputPoint);

    recorder = new Recorder(inputPoint);

    var zeroGain = context.createGain();
    zeroGain.gain.value = 1.0;
    inputPoint.connect( zeroGain );
    zeroGain.connect( context.destination );
}

function getBufferCallback(buffers) {
    console.log(buffers);
    var newSource = context.createBufferSource();
    var newBuffer = context.createBuffer( 2, buffers[0].length, context.sampleRate );
    newBuffer.getChannelData(0).set(buffers[0]);
    newBuffer.getChannelData(1).set(buffers[1]);
    newSource.buffer = newBuffer;

    newSource.connect( context.destination );
    newSource.start(0);
}

},{"./html5audio.js":1,"./recorder.js":3}],3:[function(require,module,exports){
'use strict';
// source: https://raw.github.com/mattdiamond/Recorderjs
var WORKER_PATH = '/static/recorderWorker.js';

var Recorder = function(source, cfg){
    var config = cfg || {};
    var bufferLen = config.bufferLen || 4096;
    this.context = source.context;
    this.node = this.context.createJavaScriptNode(bufferLen, 2, 2);
    var worker = new Worker(config.workerPath || WORKER_PATH);
    worker.postMessage({
        command: 'init',
        config: {
            sampleRate: this.context.sampleRate
        }
    });

    var recording = false;
    var currCallback;

    this.node.onaudioprocess = function (e) {
        if (!recording) return;
        worker.postMessage({
            command: 'record',
            buffer: [
                e.inputBuffer.getChannelData(0),
                e.inputBuffer.getChannelData(1)
            ]
        });
    }

    this.configure = function (cfg) {
        for (var prop in cfg){
            if (cfg.hasOwnProperty(prop)) {
                config[prop] = cfg[prop];
            }
      }
    }

    this.record = function () {
      recording = true;
    }

    this.stop = function () {
        recording = false;
    }

    this.clear = function () {
        worker.postMessage({ command: 'clear' });
    }

    this.getBuffer = function (cb) {
        currCallback = cb || config.callback;
        worker.postMessage({ command: 'getBuffer' })
    }

    this.exportWAV = function (cb, type) {
        currCallback = cb || config.callback;
        type = type || config.type || 'audio/wav';
        if (!currCallback) throw new Error('Callback not set');
        worker.postMessage({
            command: 'exportWAV',
            type: type
        });
    }

    worker.onmessage = function(e){
        var blob = e.data;
        currCallback(blob);
    }

    source.connect(this.node);
    this.node.connect(this.context.destination);    //this should not be necessary
};

Recorder.forceDownload = function (blob, filename) {
    var url = (window.URL || window.webkitURL).createObjectURL(blob);
    var link = window.document.createElement('a');
    link.href = url;
    link.download = filename || 'output.wav';
    var click = document.createEvent("Event");
    click.initEvent("click", true, true);
    link.dispatchEvent(click);
}

module.exports = Recorder;


},{}]},{},[2])